// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/usecase/interface/cart.go

// Package mockUsecase is a generated GoMock package.
package mockUsecase

import (
	reflect "reflect"

	helper "github.com/Nishad4140/ecommerce_project/pkg/common/helperStruct"
	response "github.com/Nishad4140/ecommerce_project/pkg/common/response"
	gomock "github.com/golang/mock/gomock"
)

// MockCartUsecase is a mock of CartUsecase interface.
type MockCartUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCartUsecaseMockRecorder
}

// AddAddress implements interfaces.UserUseCase.
func (*MockCartUsecase) AddAddress(id int, address helper.Address) error {
	panic("unimplemented")
}

// CreateWallet implements interfaces.UserUseCase.
func (*MockCartUsecase) CreateWallet(id int) error {
	panic("unimplemented")
}

// EditProfile implements interfaces.UserUseCase.
func (*MockCartUsecase) EditProfile(userID int, updatingDetails helper.UpdateProfile) (response.Userprofile, error) {
	panic("unimplemented")
}

// ForgotPassword implements interfaces.UserUseCase.
func (*MockCartUsecase) ForgotPassword(forgotPass helper.ForgotPassword) error {
	panic("unimplemented")
}

// UpdateAddress implements interfaces.UserUseCase.
func (*MockCartUsecase) UpdateAddress(id int, addressId int, address helper.Address) error {
	panic("unimplemented")
}

// UpdatePassword implements interfaces.UserUseCase.
func (*MockCartUsecase) UpdatePassword(userID int, Passwords helper.UpdatePassword) error {
	panic("unimplemented")
}

// UserLogin implements interfaces.UserUseCase.
func (*MockCartUsecase) UserLogin(user helper.LoginReq) (string, error) {
	panic("unimplemented")
}

// UserSignUp implements interfaces.UserUseCase.
func (*MockCartUsecase) UserSignUp(user helper.UserReq) (response.UserData, error) {
	panic("unimplemented")
}

// VerifyWallet implements interfaces.UserUseCase.
func (*MockCartUsecase) VerifyWallet(id int) error {
	panic("unimplemented")
}

// ViewProfile implements interfaces.UserUseCase.
func (*MockCartUsecase) ViewProfile(userID int) (response.Userprofile, error) {
	panic("unimplemented")
}

// MockCartUsecaseMockRecorder is the mock recorder for MockCartUsecase.
type MockCartUsecaseMockRecorder struct {
	mock *MockCartUsecase
}

// NewMockCartUsecase creates a new mock instance.
func NewMockCartUsecase(ctrl *gomock.Controller) *MockCartUsecase {
	mock := &MockCartUsecase{ctrl: ctrl}
	mock.recorder = &MockCartUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartUsecase) EXPECT() *MockCartUsecaseMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartUsecase) AddToCart(productId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", productId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartUsecaseMockRecorder) AddToCart(productId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartUsecase)(nil).AddToCart), productId, userId)
}

// CreateCart mocks base method.
func (m *MockCartUsecase) CreateCart(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockCartUsecaseMockRecorder) CreateCart(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockCartUsecase)(nil).CreateCart), id)
}

// ListCart mocks base method.
func (m *MockCartUsecase) ListCart(userId int) (response.ViewCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCart", userId)
	ret0, _ := ret[0].(response.ViewCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCart indicates an expected call of ListCart.
func (mr *MockCartUsecaseMockRecorder) ListCart(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCart", reflect.TypeOf((*MockCartUsecase)(nil).ListCart), userId)
}

// RemoveFromCart mocks base method.
func (m *MockCartUsecase) RemoveFromCart(userId, productId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", userId, productId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockCartUsecaseMockRecorder) RemoveFromCart(userId, productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockCartUsecase)(nil).RemoveFromCart), userId, productId)
}
